steps:
  # Paso para construir y empujar la imagen Docker del backend a GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/jenkinsgpc/jenkinsgpc-backend'
      - './api'
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/jenkinsgpc/jenkinsgpc-backend']

  # Paso para construir y empujar la imagen Docker del frontend a GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/jenkinsgpc/jenkinsgpc-frontend'
      - './site'
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/jenkinsgpc/jenkinsgpc-frontend']

  # Pasos para desplegar la aplicación en Kubernetes utilizando gke-deploy
  - name: 'gcr.io/cloud-builders/gke-deploy'
    args:
      - 'run'
      - '--filename=./api/deployment-backend.yaml'
      - '--image=gcr.io/jenkinsgpc/jenkinsgpc-backend'
      - '--location=us-central1-c'
      - '--cluster=jenkins-cicd-cluster'

  - name: 'gcr.io/cloud-builders/gke-deploy'
    args:
      - 'run'
      - '--filename=./site/deployment-frontend.yaml'
      - '--image=gcr.io/jenkinsgpc/jenkinsgpc-frontend'
      - '--location=us-central1-c'
      - '--cluster=jenkins-cicd-cluster'

  # Eliminar los recursos del frontend
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'delete'
      - '-f'
      - './site/deployment-frontend.yaml'
      - '--ignore-not-found=true'
      - '-o'
      - 'json'  # Especifica el formato de salida como JSON

# Especifica la ubicación del bucket de Cloud Storage para almacenar las imágenes y artefactos
artifacts:
  objects:
    location: 'gs://proyecto-jenkins-gcp/'  # Ubicación para almacenar las imágenes Docker y los artefactos
    paths:
      - 'api/*'  # Ruta para los artefactos del backend
      - 'site/*'  # Ruta para los artefactos del frontend

# Especifica el nombre del bucket para los registros de la compilación
logsBucket: 'gs://proyecto-jenkins-gcp'
